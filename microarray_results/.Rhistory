}
meanMatrices<-lapply(unique(names(datalist2)),meanMatrix,datalist2)
names(meanMatrices)<-unique(names(datalist2))
meanMatrices<-lapply(meanMatrices,as.dist)
hclusters<-lapply(meanMatrices,hclust,"ave")
cophList<-lapply(hclusters,cophenetic)
correlations<-mapply(cor,meanMatrices,cophList)
correlations
#read in all the results for the samples with varying numbers of gene and patient clusters
fileslist<-list.files(path="~/PairedOACartilage/Clustering/sampleTest/",full.names=T)
#load in all the data as a list
datalist = lapply(fileslist, function(x){read.table(file=x, header=F, quote="\"")})
#get the names
fileslist<-list.files(path="~/PairedOACartilage/Clustering/sampleTest/")
fileslist<-sapply(fileslist,function(x) paste(unlist(strsplit(x,"_"))[1:3],collapse=""))
datalist=lapply(datalist,t)
names(datalist)<-fileslist
#remove all bad entries
good = sapply(datalist,function(x) length(unique(x[,1]))==1)
datalist<-datalist[!good]
datalist2<-lapply(datalist,function(x) cbind(x,values=1:nrow(x)))
#create the cooccurance matrix for each one
datalist2<-lapply(datalist2,function(x) crossprod(table(as.data.frame(x))))
#replace the diagonal by 0?
#need to find the mean for every matrix with the same name
meanMatrix<-function(parameterNames,matrixInput) {
meansMatrix<-Reduce("+", matrixInput[names(matrixInput)==parameterNames])/length(matrixInput[names(matrixInput)==parameterNames])
return(meansMatrix)
}
meanMatrices<-lapply(unique(names(datalist2)),meanMatrix,datalist2)
names(meanMatrices)<-unique(names(datalist2))
meanMatrices<-lapply(meanMatrices,as.dist)
hclusters<-lapply(meanMatrices,hclust,"ave")
cophList<-lapply(hclusters,cophenetic)
correlations<-mapply(cor,meanMatrices,cophList)
correlations
meanMatrices<-lapply(unique(names(datalist2)),meanMatrix,datalist2)
names(meanMatrices)<-unique(names(datalist2))
consensusmap(meanMatrices[[1]])
consensusmap(meanMatrices[[2]])
consensusmap(meanMatrices[[2]])
consensusmap(meanMatrices[[3]])
consensusmap(meanMatrices[[4]])
consensusmap(meanMatrices[[2]])
consensusmap(meanMatrices[[1]])
prcomp(meanMatrices[[1]])
pca=prcomp(meanMatrices[[1]])
xyplot(PC2 ~ PC1,groups=as.factor(batches),data= as.data.frame(pca$x),cex=2.5,pch=21,col="black",fill=brewer.pal(n=6,name="Set1"))
xyplot(PC2 ~ PC1,groups=as.factor(batches),data= as.data.frame(pca$x),auto.key=T,cex=2.5,pch=21)
xyplot(PC2 ~ PC1,data = as.data.frame(pca$x), cex = 2, aspect = "iso")
pca=prcomp(meanMatrices[[2]])
xyplot(PC2 ~ PC1,data = as.data.frame(pca$x), cex = 2, aspect = "iso")
(pca$sdev)^2 / sum(pca$sdev^2)
9.597076e-01
1.028439e-02
1.028439e-02*100
bob=kmeans(meanMatrices[[1]],centers=3)
bob
bob=kmeans(meanMatrices[[1]],centers=4)
bob
bob=kmeans(meanMatrices[[2]],centers=3)
bob
do.call(cbind, lapply(recovery, data.frame, stringsAsFactors=FALSE))
library(plyr)
do.call(cbind.fill, lapply(recovery, data.frame, stringsAsFactors=FALSE))
do.call(rbind.fill, lapply(recovery, data.frame, stringsAsFactors=FALSE))
recovery[[1]]
min(sapply(recovery,length))
AllPairsDEGMatrixGeneLengthCorrected <- read.delim("~/AnalysisForTim/AllPairsDEGMatrixGeneLengthCorrected")
DEGs<-AllPairsDEGMatrixGeneLengthCorrected[ abs(AllPairsDEGMatrixGeneLengthCorrected$log2FoldChange)>=0.58,]
DEGs<-DEGs[ DEGs$padj<=0.05,]
DEGs<-DEGs$Gene.name
DEGs<-na.omit(DEGs)
DEGs<-na.omit(unlist(mget(as.character(DEGs), envir=org.Hs.egSYMBOL2EG, ifnotfound=NA)) )
factorBookMotifs<-getNormalisedScores(geneIDs=DEGs,datasource="PWM",cutoff=0.1)
#save(factorBookMotifs,file="~/Genomes/OA_DEGs.RData")
#load("~/Genomes/OA_DEGs.RData")
factorBookMotifs=factorBookMotifs[-grep("yetfasco",x=factorBookMotifs$Row.names),]
chip=getNormalisedScores(DEGs,datasource="ChipSeq",returnLength=100,cutoff=0.1)
#save(chip,file="~/Genomes/OA_chip.RData")
#load("~/Genomes/OA_chip.RData")
CoExpress=getNormalisedScores(DEGs,datasource="CoExpress",returnLength=100,cutoff=0.1)
#save(CoExpress,file="~/Genomes/OA_CoExpress.RData")
#load("~/Genomes/OA_CoExpress.RData")
EVEX<-getOverlapPvalues(DEGs,17164)
#save(EVEX,file="~/Genomes/OA_EVEX.RData")
#load("~/Genomes/OA_EVEX.RData")
EVEX<-EVEX[EVEX<=0.2]
chip_unique<-unique(names(chip))
chip_unique2<-na.omit(unlist(mget(chip_unique, envir=org.Hs.egSYMBOL2EG, ifnotfound=NA)))
EVEX_unique<-unique(names(EVEX))
Coexpression_unique<-unique(names(CoExpress))
factorBookMotifs_unique<-unique(factorBookMotifs[,3])
All<-list(chip=chip_unique2,EVEX=EVEX_unique,Coexpression=Coexpression_unique,motif=factorBookMotifs_unique)
#get the gene names of the TFs found by more than one method
genes=select(org.Hs.eg.db, names(sort(table(unlist(All)),decreasing=T)[1:11]), "SYMBOL")
genes
AllPairsDEGMatrixGeneLengthCorrected <- read.delim("~/AnalysisForTim/AllPairsDEGMatrixGeneLengthCorrected")
DEGs<-AllPairsDEGMatrixGeneLengthCorrected[ abs(AllPairsDEGMatrixGeneLengthCorrected$log2FoldChange)>=0.58,]
DEGs<-DEGs[ DEGs$padj<=0.05,]
DEGs<-DEGs$Gene.name
DEGs<-na.omit(DEGs)
DEGs<-na.omit(unlist(mget(as.character(DEGs), envir=org.Hs.egSYMBOL2EG, ifnotfound=NA)) )
factorBookMotifs<-getNormalisedScores(geneIDs=DEGs,datasource="PWM",cutoff=0.1)
#save(factorBookMotifs,file="~/Genomes/OA_DEGs.RData")
#load("~/Genomes/OA_DEGs.RData")
chip=getNormalisedScores(DEGs,datasource="ChipSeq",returnLength=100,cutoff=0.1)
#save(chip,file="~/Genomes/OA_chip.RData")
#load("~/Genomes/OA_chip.RData")
CoExpress=getNormalisedScores(DEGs,datasource="CoExpress",returnLength=100,cutoff=0.1)
#save(CoExpress,file="~/Genomes/OA_CoExpress.RData")
#load("~/Genomes/OA_CoExpress.RData")
EVEX<-getOverlapPvalues(DEGs,17164)
#save(EVEX,file="~/Genomes/OA_EVEX.RData")
#load("~/Genomes/OA_EVEX.RData")
EVEX<-EVEX[EVEX<=0.2]
chip_unique<-unique(names(chip))
chip_unique2<-na.omit(unlist(mget(chip_unique, envir=org.Hs.egSYMBOL2EG, ifnotfound=NA)))
EVEX_unique<-unique(names(EVEX))
Coexpression_unique<-unique(names(CoExpress))
factorBookMotifs_unique<-unique(factorBookMotifs[,3])
All<-list(chip=chip_unique2,EVEX=EVEX_unique,Coexpression=Coexpression_unique,motif=factorBookMotifs_unique)
#get the gene names of the TFs found by more than one method
genes=select(org.Hs.eg.db, names(sort(table(unlist(All)),decreasing=T)[1:11]), "SYMBOL")
genes
max(sapply(recovery,length))
DEGsFound=sapply(recovery,length))
DEGsFound=sapply(recovery,length)
maxDEGsFound=max(DEGsFound)
maxDEGsFound
which.max(DEGsFound)
head(recovery)
recovery[["MDB4"]]
recovery["MDB4"]
recovery[["MBD4"]]
length(recovery[["MBD4"]])
max(DEGsFound)
recovery
length(recovery[["MBD4"]])
recoveryExpanded=lapply(seq_along(recovery), function(x) c(recovery[[x]],rep(recovery[[x]][DEGsFound[x],maxDEGsFound-DEGsFound[x])))
recoveryExpanded=lapply(seq_along(recovery), function(x) c(recovery[[x]],rep(recovery[[x]][DEGsFound[x]],maxDEGsFound-DEGsFound[x])))
head(recoveryExpanded)
sapply(recovery,length)
sapply(recoveryExpanded,length)
recoveryExpandeddata.frame(matrix(unlist(l), nrow=length(recoveryExpanded), byrow=T))
recoveryExpanded<-data.frame(matrix(unlist(l), nrow=length(recoveryExpanded), byrow=T))
recoveryExpanded<-data.frame(matrix(unlist(recoveryExpanded), nrow=length(recoveryExpanded), byrow=T))
dim(recoveryExpanded)
head(recoveryExpanded)
rownames(recoveryExpanded)=names(recovery)
rownames(recoveryExpanded)=make.names(names(recovery))
make.names(names(recovery))
rownames(recoveryExpanded)=make.names(names(recovery),unique=T)
head(recoveryExpanded)
meanCurve<-colMeans(recoveryExpanded)+(2*apply(recoveryExpanded,2,sd))
enrichedMotifs<-recoveryExpanded-meanCurve
max=apply(enrichedMotifs,1,which.max)
max
maxDifference=apply(enrichedMotifs,1,which.max)
normalisedScores
normalisedScores2
normalisedScores <-scale(auc)
names(normalisedScores)<-names(auc)
normalisedScores2<-sort(normalisedScores,decreasing=T)
normalisedScores2<-normalisedScores[ normalisedScores>=3]
head(normalisedScores)
which(normalisedScores>=3)
enrichedMotifs=enrichedMotifs[which(normalisedScores>=3),]
enrichedMotifs
enrichedGenes<-lapply(seq_along(enrichedMotifs),function(x) enrichedMotifs[[x]][1:max[x],1])
meanCurve<-colMeans(recoveryExpanded)+(2*apply(recoveryExpanded,2,sd))
enrichedMotifs<-recoveryExpanded-meanCurve
maxDifference=apply(enrichedMotifs,1,which.max)
enrichedMotifs=enrichedMotifs[which(normalisedScores>=3),]
enrichedGenes<-lapply(seq_along(enrichedMotifs),function(x) enrichedMotifs[[x]][1:maxDifference[x],1])
seq_along(enrichedMotifs)
enrichedGenes<-sapply(seq_along(enrichedMotifs),function(x) enrichedMotifs[x,1:maxDifference[x])
enrichedGenes<-sapply(seq_along(enrichedMotifs),function(x) enrichedMotifs[x,1:maxDifference[x]])
enrichedGenes
maxDifference
enrichedMotifPostions=which(normalisedScores>=3)
enrichedMotifPositions=which(normalisedScores>=3)
enrichedGenesPostions<-lapply(enrichedMotifPositions,function(x) recovery[[x]][1:maxDifference[x]])
enrichedGenesPostions
maxDifference[enrichedMotifPostions]
enrichedGenes<-lapply(seq_along(enrichedGenesPostions),function(x) datalist[[enrichedMotifPositions[x]]][enrichedGenesPostions[x]]])
enrichedGenes<-lapply(seq_along(enrichedGenesPostions),function(x) datalist[[enrichedMotifPositions[x]]][enrichedGenesPostions[x]])
enrichedGenes<-lapply(seq_along(enrichedGenesPostions),function(x) datalist[[enrichedMotifPositions[x]]][enrichedGenesPostions[[x]]])
Q
enrichedMotifPositions
length(datalist)
head(datalist)
load("~/Genomes/chipSeqRankings.RData")
load("~/Genomes/reMapChipRankings.RData")
datalist<-c(chipSeqRankings,reMapChipSeqRankings)
inputGenes<-paste("X",geneIDs,sep="")
recovery <- lapply(datalist,function (x) sort(match(inputGenes,x[1:700,1])))
lengths<-sapply(recovery,function(x) na.omit(length(x)))
recovery<-recovery[lengths>=2] # unhard code!
datalist<-datalist[lengths>=2] # unhard code!
lengths<-lengths[lengths>=2]
lengths
normalisedScores<-NA
yaxis<-lapply(seq_along(recovery),function(x) 1:length(recovery[[x]]))
names(yaxis)<-names(recovery)
auc<-sapply(seq_along(recovery), function(x) trapz(recovery[[x]],yaxis[[x]]))
names(auc)<-names(recovery)
normalisedScores <-scale(auc)
names(normalisedScores)<-names(auc)
normalisedScores2<-sort(normalisedScores,decreasing=T)
normalisedScores2<-normalisedScores[ normalisedScores>=3]
print(length(normalisedScores))
DEGsFound=sapply(recovery,length)
maxDEGsFound=max(DEGsFound)
#repeat the last element of the recovery vector to the max
recoveryExpanded=lapply(seq_along(recovery), function(x) c(recovery[[x]],rep(recovery[[x]][DEGsFound[x]],maxDEGsFound-DEGsFound[x])))
recoveryExpanded<-data.frame(matrix(unlist(recoveryExpanded), nrow=length(recoveryExpanded), byrow=T))
rownames(recoveryExpanded)=make.names(names(recovery),unique=T)
#get the mean rank for each postion
meanCurve<-colMeans(recoveryExpanded)+(2*apply(recoveryExpanded,2,sd))
enrichedMotifs<-recoveryExpanded-meanCurve
maxDifference=apply(enrichedMotifs,1,which.max)
enrichedMotifPositions=which(normalisedScores>=3)
#get the lists of gene rankings for the enriched motifs
enrichedGenesPostions<-lapply(enrichedMotifPositions,function(x) recovery[[x]][1:maxDifference[x]])
enrichedGenes<-lapply(seq_along(enrichedGenesPostions),function(x) datalist[[enrichedMotifPositions[x]]][enrichedGenesPostions[[x]]])
Q
head(datalist)
enrichedGenes<-lapply(seq_along(enrichedGenesPostions),function(x) datalist[[enrichedMotifPositions[x]]][enrichedGenesPostions[[x]],1])
enrichedGenes
enrichedMotifPositions=names(recovery[[which(normalisedScores>=3)]])
enrichedMotifPositions=names(recovery[which(normalisedScores>=3)])
enrichedMotifPostions
head(recovery)
which(normalisedScores>=3
)
recovery[[which(normalisedScores>=3]]
recovery[[which(normalisedScores>=3)]]
recovery[which(normalisedScores>=3)]
recovery[which(normalisedScores>=3)]
names(recovery[which(normalisedScores>=3)])
getNormalisedScores<-function(geneIDs=NULL,datasource=c("PWM","ChipSeq","CoExpress"),cutoff=0.03,returnLength=100) {
flag=0
require("caTools")
if (datasource == "PWM"){
load("~/Genomes/datalist2.R")
inputGenes<-paste("X",geneIDs,sep="")
# inputGenes<-geneIDs
names(datalist)<-sapply(datalist,function(x) colnames(x)[2])
flag=1
}
else if (datasource == "ChipSeq") {
load("~/Genomes/chipSeqRankings.RData")
load("~/Genomes/reMapChipRankings.RData")
datalist<-c(chipSeqRankings,reMapChipSeqRankings)
inputGenes<-paste("X",geneIDs,sep="")
}
else if (datasource == "CoExpress") {
load("~/Genomes/coexpressionDataList.R")
inputGenes<-sub(pattern="X",replacement="",x=geneIDs)
datalist<-coexpressionDataList
}
recovery <- lapply(datalist,function (x) sort(match(inputGenes,x[1:700,1])))
lengths<-sapply(recovery,function(x) na.omit(length(x)))
recovery<-recovery[lengths>=2] # unhard code!
datalist<-datalist[lengths>=2] # unhard code!
lengths<-lengths[lengths>=2]
# yaxis<-lapply(seq_along(recovery),function(x) 1:length(recovery[[x]])/lengths[x])
# names(yaxis)<-names(recovery)
# auc<-sapply(seq_along(recovery), function(x) trapz(recovery[[x]],yaxis[[x]])/max(recovery[[x]]))
normalisedScores<-NA
if (length(lengths)>0) {
yaxis<-lapply(seq_along(recovery),function(x) 1:length(recovery[[x]]))
names(yaxis)<-names(recovery)
auc<-sapply(seq_along(recovery), function(x) trapz(recovery[[x]],yaxis[[x]]))
names(auc)<-names(recovery)
normalisedScores <-scale(auc)
names(normalisedScores)<-names(auc)
normalisedScores2<-sort(normalisedScores,decreasing=T)
normalisedScores2<-normalisedScores[ normalisedScores>=3]
print(length(normalisedScores))
if (length(normalisedScores)>0) {
if (flag==1) {
#normalisedScores<-normalisedScores[-grep("yetfasco",names(normalisedScores))]
normalisedScores<-getTF(normalisedScores)
}
else {
#find the max length of the recovery
DEGsFound=sapply(recovery,length)
maxDEGsFound=max(DEGsFound)
#repeat the last element of the recovery vector to the max
recoveryExpanded=lapply(seq_along(recovery), function(x) c(recovery[[x]],rep(recovery[[x]][DEGsFound[x]],maxDEGsFound-DEGsFound[x])))
recoveryExpanded<-data.frame(matrix(unlist(recoveryExpanded), nrow=length(recoveryExpanded), byrow=T))
rownames(recoveryExpanded)=make.names(names(recovery),unique=T)
#get the mean rank for each postion
meanCurve<-colMeans(recoveryExpanded)+(2*apply(recoveryExpanded,2,sd))
enrichedMotifs<-recoveryExpanded-meanCurve
maxDifference=apply(enrichedMotifs,1,which.max)
enrichedMotifPositions=which(normalisedScores>=3)
#get the lists of gene rankings for the enriched motifs
enrichedGenesPostions<-lapply(enrichedMotifPositions,function(x) recovery[[x]][1:maxDifference[x]])
enrichedGenes<-lapply(seq_along(enrichedGenesPostions),function(x) datalist[[enrichedMotifPositions[x]]][enrichedGenesPostions[[x]],1])
names(enrichedGenes)<-names(recovery[which(normalisedScores>=3)])
#merge the results for enriched motifs with the same name?
}
}
}
return(list(normalisedScores=normalisedScores2,enrichedGenes=enrichedGenes))
}
chip=getNormalisedScores(DEGs,datasource="ChipSeq",returnLength=100)
chip
chip$enrichedGenes$FOXM1
keys <- unique(c(names(chip$enrichedGenes))
)
keys
apply(c, [keys])
lapply(chip$enrichedGenes,c, [keys])
lapply(chip$enrichedGenes,c, keys)
keys
chip$enrichedGenes[keys]
chip$enrichedGenes[keys[2]]
chip$enrichedGenes[keys[3]]
chip$enrichedGenes[keys[4]]
temp=chip$enrichedGenes[[names(chip$enrichedGenes) %in% key]]
key=keys[[1]]
temp=chip$enrichedGenes[[names(chip$enrichedGenes) %in% key]]
temp=chip$enrichedGenes[names(chip$enrichedGenes) %in% key]
temp
temp=!duplicated(unlist(temp))
temp
temp=chip$enrichedGenes[names(chip$enrichedGenes) %in% key]
temp=na.omit(unique(unlist(temp)))
temp
chipEnrichedGenes=list()
keys <- unique(c(names(chip$enrichedGenes))
chipEnrichedGenes=list()
for (key in keys){
temp=chip$enrichedGenes[names(chip$enrichedGenes) %in% key]
temp=na.omit(unique(unlist(temp)))
chipEnrichedGenes[[key]]=temp
}
keys <- unique(c(names(chip$enrichedGenes)))
chipEnrichedGenes=list()
for (key in keys){
temp=chip$enrichedGenes[names(chip$enrichedGenes) %in% key]
temp=na.omit(unique(unlist(temp)))
chipEnrichedGenes[[key]]=temp
}
chipEnrichedGenes
CoExpress=getNormalisedScores(DEGs,datasource="CoExpress",returnLength=100)
CoExpress$enrichedGenes
keys <- unique(names(chip$enrichedGenes))
chipEnrichedGenes=list()
for (key in keys){
temp=chip$enrichedGenes[names(chip$enrichedGenes) %in% key]
temp=na.omit(unique(unlist(temp)))
temp=sub(pattern="X",replacement="",x=temp)
chipEnrichedGenes[[key]]=temp
}
chipEnrichedGenes
CoExpress$enrichedGenes
load("~/Genomes/datalist2.R")
inputGenes<-paste("X",geneIDs,sep="")
# inputGenes<-geneIDs
names(datalist)<-sapply(datalist,function(x) colnames(x)[2])
flag=1
recovery <- lapply(datalist,function (x) sort(match(inputGenes,x[1:700,1])))
lengths<-sapply(recovery,function(x) na.omit(length(x)))
recovery<-recovery[lengths>=2] # unhard code!
datalist<-datalist[lengths>=2] # unhard code!
lengths<-lengths[lengths>=2]
# yaxis<-lapply(seq_along(recovery),function(x) 1:length(recovery[[x]])/lengths[x])
# names(yaxis)<-names(recovery)
# auc<-sapply(seq_along(recovery), function(x) trapz(recovery[[x]],yaxis[[x]])/max(recovery[[x]]))
normalisedScores<-NA
length(datalist)
20000*0.03
yaxis<-lapply(seq_along(recovery),function(x) 1:length(recovery[[x]]))
names(yaxis)<-names(recovery)
auc<-sapply(seq_along(recovery), function(x) trapz(recovery[[x]],yaxis[[x]]))
names(auc)<-names(recovery)
normalisedScores <-scale(auc)
names(normalisedScores)<-names(auc)
normalisedScores2<-sort(normalisedScores,decreasing=T)
normalisedScores2<-normalisedScores[ normalisedScores>=3]
normalisedScores2<-getTF(normalisedScores2)
normalisedScores2
normalisedScores
head(normalisedScores)
head(normalisedScores2)
normalisedScores=as.vector(normalisedScores)
head(normalisedScores)
names(normalisedScores)<-names(auc)
head(normalisedScores)
DEGsFound=sapply(recovery,length)
maxDEGsFound=max(DEGsFound)
#repeat the last element of the recovery vector to the max
recoveryExpanded=lapply(seq_along(recovery), function(x) c(recovery[[x]],rep(recovery[[x]][DEGsFound[x]],maxDEGsFound-DEGsFound[x])))
recoveryExpanded<-data.frame(matrix(unlist(recoveryExpanded), nrow=length(recoveryExpanded), byrow=T))
rownames(recoveryExpanded)=make.names(names(recovery),unique=T)
#get the mean rank for each postion
meanCurve<-colMeans(recoveryExpanded)+(2*apply(recoveryExpanded,2,sd))
enrichedMotifs<-recoveryExpanded-meanCurve
maxDifference=apply(enrichedMotifs,1,which.max)
enrichedMotifPositions=which(normalisedScores>=3)
#get the lists of gene rankings for the enriched motifs
enrichedGenesPostions<-lapply(enrichedMotifPositions,function(x) recovery[[x]][1:maxDifference[x]])
enrichedGenes<-lapply(seq_along(enrichedGenesPostions),function(x) datalist[[enrichedMotifPositions[x]]][enrichedGenesPostions[[x]],1])
names(enrichedGenes)<-names(recovery[which(normalisedScores>=3)])
enrichedGenes
normalisedScores2
datalist[["hdpi-FOXM1.cb"]]
recovery[["hdpi-FOXM1.cb"]]
auc[["hdpi-FOXM1.cb"]]
head(auc)
mean(auc)
normalisedScores["hdpi-FOXM1.cb"]
DEGsFound=sapply(recovery,length)
maxDEGsFound=max(DEGsFound)
#repeat the last element of the recovery vector to the max
recoveryExpanded=lapply(seq_along(recovery), function(x) c(recovery[[x]],rep(recovery[[x]][DEGsFound[x]],maxDEGsFound-DEGsFound[x])))
auc<-sapply(seq_along(recoveryExpanded), function(x) trapz(recovery[[x]],yaxis[[x]]))
names(auc)<-names(recovery)
normalisedScores <-scale(auc)
names(normalisedScores)<-names(auc)
auc[["hdpi-FOXM1.cb"]]
auc<-sapply(seq_along(recoveryExpanded), function(x) trapz(recoveryExpanded[[x]],yaxis[[x]]))
names(auc)<-names(recovery)
normalisedScores <-scale(auc)
names(normalisedScores)<-names(auc)
auc[["hdpi-FOXM1.cb"]]
auc["hdpi-FOXM1.cb"]
auc
head(recoveryExpanded)
auc<-sapply(seq_along(recoveryExpanded), function(x) trapz(recoveryExpanded[[x]],yaxis[[x]]))
names(auc)<-names(recovery)
normalisedScores <-scale(auc)
names(normalisedScores)<-names(auc)
auc["hdpi-FOXM1.cb"]
auc[["hdpi-FOXM1.cb"]]
yaxis<-lapply(seq_along(recoveryExpanded),function(x) 1:length(recoveryExpanded[[x]]))
names(yaxis)<-names(recovery)
auc<-sapply(seq_along(recoveryExpanded), function(x) trapz(recoveryExpanded[[x]],yaxis[[x]]))
names(auc)<-names(recovery)
normalisedScores <-scale(auc)
names(normalisedScores)<-names(auc)
auc["hdpi-FOXM1.cb"]
normalisedScores["hdpi-FOXM1.cb"]
recovery[["hdpi-FOXM1.cb"]]
DEGs
length(DEGs)
recovery[["hdpi-FOXM1.cb"]]
recovery[["hdpi-FOXM1.cb"]]
enrichedGenes
names(enrichedGenes)
recovery[["V_GLIS2_04"]]
yaxis[["V_GLIS2_04"]]
plot(recovery[["V_GLIS2_04"]],yaxis[[x]])
plot(recovery[["V_GLIS2_04"]],yaxis[["V_GLIS2_04"]])
line(recovery[[2]],yaxis[[2]]
)
head(recovery[[1]])
head(recovery[[1]])
head(yaxis[[1]])
line(recovery[[3]],yaxis[[3]]
)
yaxis<-lapply(seq_along(recovery),function(x) 1:length(recovery[[x]]))
line(recovery[[3]],yaxis[[3]])
+line(recovery[[3]],yaxis[[3]])
plot(recovery[[3]],yaxis[[3]])
plot(recovery[["V_GLIS2_04"]],yaxis[["V_GLIS2_04"]])
plot(recovery[["hdpi-FOXM1.cb"]],yaxis[["hdpi-FOXM1.cb"]])
bob=datalist[["hdpi-FOXM1.cb"]]
head(bob)
bob[ bob$hdpi-FOXM1.cb=="X9844",]
bob[ bob$"hdpi-FOXM1.cb"=="X9844",]
bob[ bob$"hdpi-FOXM1.cb"=="X9844",]
bob[ bob$"hdpi-FOXM1.cb",]
bob[ bob$"hdpi-FOXM1.cb",]
bob[ bob$hdpi-FOXM1.cb=="X1827",]
bob[ bob$"hdpi-FOXM1.cb"=="X1827",]
bob[ bob$"hdpi-FOXM1.cb"=="X1718",]
bob[ bob$Name=="X1718",]
bob[ bob$hdpi-FOXM1.cb=="X9844",]
bob[ bob$Name=="X9844",]
length(bob)
dim(bob)
bob=datalist[["V$ELF4_04"]]
bob
bob=datalist[["V$ELF4"]]
bob
bob=datalist[["V$ELF4"]]
names(datalist)
bob=datalist[["V_ELF4_04"]]
bob
head(bob)
bob[ bob$Name=="X1305",]
bob[ bob$Name=="X3667",]
normalisedScores2
sort(normalisedScores2$Row.names)
sort(normalisedScores2$HumanEntrez)
unique(sort(normalisedScores2$HumanEntrez))
bob[ bob$Name=="X1",]
bob=datalist[["hdpi-FOXM1.cb"]]
bob[ bob$Name=="X1",]
bob[ bob$Name=="X10",]
library('RobustRankAggreg')
b=c(1,2,3,4,5)
c=c(2,1,5,4,3)
aggregateRanks(list(b,c), full = TRUE, exact = F)
aggregateRanks(list(b,c), full = F, exact = F)
?aggregateRanks
